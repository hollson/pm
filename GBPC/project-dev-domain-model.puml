@startuml ad-domain-model
title GBPC-领域模型
'abstract        抽象
'abstract class  抽象(等同abstract)
'annotation      注解
'circle          圆
'()              圆缩写形式
'class           类
'diamond         菱形
'<>              菱形写形式

'enum            枚举
interface "命令执行器" as sender
entity    "策略管理器" as policy_manager
entity    "策略分发器" as policy_sender
entity    "策略解析器" as policy_parser
sender<|..policy_manager
policy_manager *-- policy_parser
policy_manager *-- policy_sender


entity      分组管理器

entity       分组标签
entity       分组规则


abstract       "策略执行者" as Executor
Executor  <|-- SHELL终端
Executor  <|-- Pipe管道
Executor  <|-- MQ订阅者

'IPay<|..AliPay:【Realization】实现
'Computer o-- Keyboards:聚合
'Bird *-- Wing:组合

' ================================================================
newpage

title 注释
交通工具 <|--- 公交车
交通工具 <|--- 摩托车


note bottom: 注释在底部
note top of 交通工具: 注释在顶部
note left of 交通工具: 注释在左边
note right of 交通工具: 注释在右边
note on link #99FF99: 泛化(给连线添加注解)


note "使用双点连接\n到多个对象"  as N2 #f0f0f0

交通工具 .. N2
N2 .. 公交车
N2 .. 摩托车

class Server{
   - string Name
   + void Run()
   + void Run(int port)
}

note left of Server::Name
  给属性成员添加注释
end note
note left of Server::Run
  给方法添加注释
end note
note left of Server::"void Run(int port)"
  给【重载】方法添加注释
end note

newpage
title 定义类(两种)
'方式一
Object  <|-- ArrayList:泛化
Object : bool equals()
ArrayList : Object[] Data
ArrayList : int Size()

class Handler << general >>
Handler : Data char[]
Handler : DoSomething()

'方式二
class Dummy {
  string Filed1
  void Method1()
  {field} char Method1()
  {method} float Filed2
}
note bottom of Dummy:  可以使用field或method\n标识符强制声明字段或方法

'枚举
enum Sex {
  男
  女
}
@enduml