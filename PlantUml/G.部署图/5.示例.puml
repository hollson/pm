@startuml
'https://plantuml.com/sequence-diagram

<style>
    actor {
      BackGroundColor #green
      LineThickness 1
      LineColor black
    }
    agent {
      BackGroundColor #f80c12
      LineThickness 1
      LineColor black
    }
    artifact {
      BackGroundColor #a536dd
      LineThickness 1
      LineColor black
    }
    boundary {
      BackGroundColor #ee1100
      LineThickness 1
      LineColor black
    }
    card {
      BackGroundColor #6fbad4
      LineThickness 1
      LineColor black
    }
    circle {
      BackGroundColor #ff3311
      LineThickness 1
      LineColor black
    }
    cloud {
      BackGroundColor #ff4422
      LineThickness 1
      LineColor black
    }
    collections {
      BackGroundColor #d0c310
      LineThickness 1
      LineColor black
    }
    component {
      BackGroundColor #ff6644
      LineThickness 1
      LineColor black
    }
    control {
      BackGroundColor #ff6644
      LineThickness 1
      LineColor black
    }
    database {
      BackGroundColor #ff9933
      LineThickness 1
      LineColor black
    }
    entity {
      BackGroundColor #feae2d
      LineThickness 1
      LineColor black
    }
    file {
      BackGroundColor #feae2d
      LineThickness 1
      LineColor black
    }
    folder {
      BackGroundColor #ccbb33
      LineThickness 1
      LineColor black
    }
    frame {
      BackGroundColor #d0c310
      LineThickness 1
      LineColor black
    }
    hexagon {
      BackGroundColor #aacc22
      LineThickness 1
      LineColor black
    }
    interface {
      BackGroundColor #69d025
      LineThickness 1
      LineColor black
    }
    label {
      BackGroundColor black
      LineThickness 1
      LineColor black
    }
    node {
      BackGroundColor #dae9ec
      LineThickness 1
      LineColor black
    }
    package {
      BackGroundColor #12bdb9
      LineThickness 1
      LineColor black
    }
    person {
      BackGroundColor #11aabb
      LineThickness 1
      LineColor black
    }
    queue {
      BackGroundColor #11aabb
      LineThickness 1
      LineColor black
    }
    rectangle {
      BackGroundColor #1edd5a
      LineThickness 1
      LineColor black
    }
    stack {
      BackGroundColor #6687fd
      LineThickness 1
      LineColor black
    }
    storage {
      BackGroundColor #f06292
      LineThickness 1
      LineColor black
    }
    usecase {
      BackGroundColor #288eec
      LineThickness 1
      LineColor black
    }
</style>

title Web框架
skinparam handwritten true
left to right direction  /'水平布局'/
skinparam databaseBackgroundColor Aqua

node "客户端" as client
rectangle "\n\n\n\n\n防火墙\n\n\n\n\n" as wall #pink;line:red;line.bold;text:red
collections "\n\n\n\n\n负载均衡\n\n\n\n\n" as bl #gold;line:red;line.bold;text:red

node {
  collections "Web服务器" as web1
  collections "Web服务器" as web2
  collections "Web服务器" as web3
  collections "Web服务器" as web4
}


database "\n\n\n主数据库\n\n\n" as dbm  #green;line:black;line.bold;text:white
node {
  database "从数据库" as dbs1
  database "从数据库" as dbs2
  database "从数据库" as dbs3
  database "从数据库" as dbs4
}

client --> wall
client <.. wall
wall --> bl
wall <.. bl

bl --> web1
bl --> web2
bl --> web3
bl --> web4

web1 --> dbm #line:red;line.bold;text:red :write
web2 --> dbm #line:red;line.bold;text:red :write
web3 --> dbm #line:red;line.bold;text:red :write
web4 --> dbm #line:red;line.bold;text:red :write

dbs1 <-- dbm #line:green;line.bold;text:green :write
dbs2 <-- dbm #line:green;line.bold;text:green :write
dbs3 <-- dbm #line:green;line.bold;text:green :write
dbs4 <-- dbm #line:green;line.bold;text:green :write

web1 <-- dbs1
web2 <-- dbs2
web3 <-- dbs3
web4 <-- dbs4

@enduml


